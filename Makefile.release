# Release building.
# 'mac' target can be built only on Mac OS X due to lack of usable
# cross-compiler or emulator. 'win' should build on Linux as well.
#
# Dependencies:
# 1) docker installed and functional
# 2) mac: Qt 5 installed and directory with its binaries present in the PATH

# Builds signed Windows and Mac binaries by default. Set to "" to disable.
SIGN = "Cesanta Software Limited"
# Certificate and key are located on secure under the code_sign directory.
# For the Mac build, you should have code.keychain added to the system (use the
# Keychain Access utility). Do not unlock it and do not keep it unlocked,
# you will be asked for the passphrase in due time when signing.
# This also means you have to run build from the GUI terminal (otherwise you'll
# get "user interaction disabled" error).
#
# For the Windows build, you must have the certificate and the (encrypted)
# key files named below in the current directory. Take them from secure.
# You will be asked for the passphrase, so make sure you have that handy too.
SIGN_CERT = code.crt.pem
SIGN_KEY  = code.key.enc.pem

ifneq ($(wildcard common),)
REPO_ROOT = $(shell realpath .)
FNC_SUBDIR =
else
REPO_ROOT = $(shell realpath ..)
FNC_SUBDIR = fnc
endif

BIN_DIR = ./bin
OUT_DIR = ./out

.PHONY: clean mac ubuntu32 ubuntu64 win

mac: $(OUT_DIR) $(OUT_DIR)/FNC-mac.zip
ubuntu32: $(OUT_DIR) $(OUT_DIR)/FNC-ubuntu32.tar.xz
ubuntu64: $(OUT_DIR) $(OUT_DIR)/FNC-ubuntu64.tar.xz
win: $(OUT_DIR) $(OUT_DIR)/FNC-win.zip

$(OUT_DIR)/FNC-mac.zip: $(BIN_DIR)/FNC.app
$(OUT_DIR)/FNC-win.zip: $(BIN_DIR)/FNC.exe
$(OUT_DIR)/FNC-ubuntu32.tar.xz: $(BIN_DIR)/FNC-ubuntu32
$(OUT_DIR)/FNC-ubuntu64.tar.xz: $(BIN_DIR)/FNC-ubuntu64

$(OUT_DIR)/FNC-%.zip:
	cd $(BIN_DIR) && zip -r -9 -y ../$@ $(notdir $<)

$(OUT_DIR)/FNC-%.tar.xz:
	cd $(BIN_DIR) && tar cvJf ../$@ $(notdir $<)

$(BIN_DIR) $(OUT_DIR):
	mkdir -p $@

$(BIN_DIR)/FNC.app: $(BIN_DIR)
	qmake
	nice make -j $(shell sysctl -n hw.ncpu)
	if [ z$(SIGN) != z ]; then \
	  macdeployqt src/FNC.app -codesign=$(SIGN); \
	  codesign --verify --verbose src/FNC.app; \
	else \
	  macdeployqt src/FNC.app; \
	fi
	mv -f src/FNC.app $@
	make distclean

$(BIN_DIR)/FNC.exe: $(BIN_DIR)
	docker run --rm -it -v $(REPO_ROOT):/src docker.cesanta.com:5000/build_base bash -lcx '\
	  cd /src/$(FNC_SUBDIR)/src && \
	  /src/common/tools/fw_meta.py gen_build_info \
	    --tag_as_version=true --c_output=build_info.cc && \
	  wine qmake && \
	  nice wine mingw32-make -j 3 && \
	  cd .. && \
	  if [ z$(SIGN) != z ]; then \
	    osslsigncode sign \
	      -certs $(SIGN_CERT) -key $(SIGN_KEY) -h sha256 \
	      -n "Flashnchips, the Mongoose IoT flashing tool" \
	      -i https://www.cesanta.com/ \
	      -ts http://tsa.startssl.com/rfc3161 \
	      -in src/release/FNC.exe -out $@; \
	  else \
	    mv -f src/release/FNC.exe $@; \
	  fi; \
	  rm -rf src/release src/Makefile src/build_info.cc'

ifneq ($(SIGN),)
$(BIN_DIR)/FNC.exe: $(SIGN_CERT) $(SIGN_KEY)
endif

$(SIGN_CERT) $(SIGN_KEY):
	@echo
	@echo $(@) not found. Please copy it manually from secure.
	@echo
	@exit 1

$(BIN_DIR)/FNC-ubuntu%: $(BIN_DIR)
	docker run --rm -it -v $(REPO_ROOT):/src \
	  docker.cesanta.com:5000/build-ubuntu$*-qt5static:r1 bash -cx '\
	    cd /src/$(FNC_SUBDIR) && \
	    qmake -config static && \
	    nice make -j 3 && \
	    mv -f src/FNC $@ && \
	    make distclean'

clean:
	rm -rf $(BIN_DIR) $(OUT_DIR) Makefile src/Makefile*
